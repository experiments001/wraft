{
  "swagger": "2.0",
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "API Operations require a valid token."
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ],
  "paths": {
    "/users/signup": {
      "post": {
        "tags": [
          "Registration"
        ],
        "summary": "User registration",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/UserToken"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/UserRegisterRequest"
            },
            "required": true,
            "name": "user",
            "in": "body",
            "description": "User to register"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.RegistrationController.create",
        "description": "User registration API"
      }
    },
    "/users/signin": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "User sign in",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/UserToken"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/UserLoginRequest"
            },
            "required": true,
            "name": "user",
            "in": "body",
            "description": "User to trying to login"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.UserController.signin",
        "description": "User sign in API"
      }
    },
    "/users/me": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Current user",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/CurrentUser"
            },
            "description": "Ok"
          }
        },
        "parameters": [],
        "operationId": "WraftDocWeb.Api.V1.UserController.me",
        "description": "Current User details"
      }
    },
    "/themes/{id}": {
      "get": {
        "tags": [
          "Theme"
        ],
        "summary": "Show a theme",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ShowTheme"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "theme id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.ThemeController.show",
        "description": "Show a theme API"
      }
    },
    "/themes": {
      "post": {
        "tags": [
          "Theme"
        ],
        "summary": "Create theme",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Theme"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "name",
            "in": "formData",
            "description": "Theme's name"
          },
          {
            "type": "string",
            "required": true,
            "name": "font",
            "in": "formData",
            "description": "Font to be used in the theme"
          },
          {
            "type": "string",
            "required": true,
            "name": "typescale",
            "in": "formData",
            "description": "Typescale of the theme"
          },
          {
            "type": "file",
            "required": false,
            "name": "file",
            "in": "formData",
            "description": "Theme file to upload"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.ThemeController.create",
        "description": "Create theme API",
        "consumes": [
          "multipart/form-data"
        ]
      },
      "get": {
        "tags": [
          "Theme"
        ],
        "summary": "Theme index",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Themes"
            },
            "description": "Ok"
          }
        },
        "parameters": [],
        "operationId": "WraftDocWeb.Api.V1.ThemeController.index",
        "description": "Theme index API"
      }
    },
    "/states/{id}": {
      "put": {
        "tags": [
          "State"
        ],
        "summary": "State update",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ShowState"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "state id"
          },
          {
            "schema": {
              "$ref": "#/definitions/StateRequest"
            },
            "required": true,
            "name": "flow",
            "in": "body",
            "description": "Flow to be created"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.StateController.update",
        "description": "API to update a state"
      },
      "delete": {
        "tags": [
          "State"
        ],
        "summary": "State delete",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/State"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "state id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.StateController.delete",
        "description": "API to delete a state"
      }
    },
    "/layouts/{id}": {
      "put": {
        "tags": [
          "Layout"
        ],
        "summary": "Update a Layout",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ShowLayout"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "layout id"
          },
          {
            "schema": {
              "$ref": "#/definitions/LayoutRequest"
            },
            "required": true,
            "name": "layout",
            "in": "body",
            "description": "Layout to be updated"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.LayoutController.update",
        "description": "API to update a layout"
      },
      "get": {
        "tags": [
          "Layout"
        ],
        "summary": "Show a Layout",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ShowLayout"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "layout id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.LayoutController.show",
        "description": "API to show details of a layout"
      },
      "delete": {
        "tags": [
          "Layout"
        ],
        "summary": "Delete a Layout",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Layout"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "layout id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.LayoutController.delete",
        "description": "API to delete a layout"
      }
    },
    "/layouts": {
      "post": {
        "tags": [
          "Layout"
        ],
        "summary": "Create layout",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/LayoutAndEngine"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/LayoutRequest"
            },
            "required": true,
            "name": "layout",
            "in": "body",
            "description": "Layout to be created"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.LayoutController.create",
        "description": "Create layout API"
      },
      "get": {
        "tags": [
          "Layout"
        ],
        "summary": "Layout index",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/LayoutsAndEngines"
            },
            "description": "Ok"
          }
        },
        "parameters": [],
        "operationId": "WraftDocWeb.Api.V1.LayoutController.index",
        "description": "API to get the list of all layouts created so far"
      }
    },
    "/flows/{id}": {
      "put": {
        "tags": [
          "Flow"
        ],
        "summary": "Flow update",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/UpdateFlow"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "flow id"
          },
          {
            "schema": {
              "$ref": "#/definitions/FlowRequest"
            },
            "required": true,
            "name": "flow",
            "in": "body",
            "description": "Flow to be updated"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.FlowController.update",
        "description": "API to update a flow"
      },
      "get": {
        "tags": [
          "Flow"
        ],
        "summary": "Show a flow",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/FlowAndStates"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "flow id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.FlowController.show",
        "description": "Show a flow and its details including states under it"
      },
      "delete": {
        "tags": [
          "Flow"
        ],
        "summary": "Flow delete",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Flow"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "flow id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.FlowController.delete",
        "description": "API to delete a flow"
      }
    },
    "/flows/{flow_id}/states": {
      "post": {
        "tags": [
          "State"
        ],
        "summary": "Create a state",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/State"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/StateRequest"
            },
            "required": true,
            "name": "state",
            "in": "body",
            "description": "State to be created"
          },
          {
            "type": "string",
            "required": true,
            "name": "flow_id",
            "in": "path",
            "description": "Flow id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.StateController.create",
        "description": "Create state API"
      },
      "get": {
        "tags": [
          "State"
        ],
        "summary": "State index",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ShowStates"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "flow_id",
            "in": "path",
            "description": "flow id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.StateController.index",
        "description": "Index of States under a flow"
      }
    },
    "/flows": {
      "post": {
        "tags": [
          "Flow"
        ],
        "summary": "Create a flow",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Flow"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/FlowRequest"
            },
            "required": true,
            "name": "flow",
            "in": "body",
            "description": "Flow to be created"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.FlowController.create",
        "description": "Create flow API"
      },
      "get": {
        "tags": [
          "Flow"
        ],
        "summary": "Flow index",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ShowFlows"
            },
            "description": "Ok"
          }
        },
        "parameters": [],
        "operationId": "WraftDocWeb.Api.V1.FlowController.index",
        "description": "Index of flows in current user's organisation"
      }
    },
    "/engines": {
      "get": {
        "tags": [
          "Engine"
        ],
        "summary": "List of all enignes",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/Engines"
            },
            "description": "Ok"
          }
        },
        "parameters": [],
        "operationId": "WraftDocWeb.Api.V1.EngineController.index",
        "description": "API to list of all enignes creates/seeded so far"
      }
    },
    "/content_types/{id}": {
      "put": {
        "tags": [
          "ContentType"
        ],
        "summary": "Update a Content Type",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not Found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ShowContentType"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "content type id"
          },
          {
            "schema": {
              "$ref": "#/definitions/ContentTypeRequest"
            },
            "required": true,
            "name": "layout",
            "in": "body",
            "description": "Content Type to be updated"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.ContentTypeController.update",
        "description": "API to update a content type"
      },
      "get": {
        "tags": [
          "ContentType"
        ],
        "summary": "Show a Content Type",
        "responses": {
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not Found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ShowContentType"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "content type id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.ContentTypeController.show",
        "description": "API to show details of a content type"
      },
      "delete": {
        "tags": [
          "ContentType"
        ],
        "summary": "Delete a Content Type",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Not Found"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ContentType"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "id",
            "in": "path",
            "description": "content type id"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.ContentTypeController.delete",
        "description": "API to delete a content type"
      }
    },
    "/content_types/{c_type_id}/contents": {
      "post": {
        "tags": [
          "Instance"
        ],
        "summary": "Create a content",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ContentAndContentTypeAndFlow"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "type": "string",
            "required": true,
            "name": "c_type_id",
            "in": "path",
            "description": "content type id"
          },
          {
            "schema": {
              "$ref": "#/definitions/ContentRequest"
            },
            "required": true,
            "name": "content",
            "in": "body",
            "description": "Content to be created"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.InstanceController.create",
        "description": "Create content API"
      }
    },
    "/content_types": {
      "post": {
        "tags": [
          "ContentType"
        ],
        "summary": "Create content type",
        "responses": {
          "422": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unprocessable Entity"
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ContentTypeAndLayout"
            },
            "description": "Ok"
          }
        },
        "parameters": [
          {
            "schema": {
              "$ref": "#/definitions/ContentTypeRequest"
            },
            "required": true,
            "name": "content_type",
            "in": "body",
            "description": "Content Type to be created"
          }
        ],
        "operationId": "WraftDocWeb.Api.V1.ContentTypeController.create",
        "description": "Create content type API"
      },
      "get": {
        "tags": [
          "ContentType"
        ],
        "summary": "Content Type index",
        "responses": {
          "401": {
            "schema": {
              "$ref": "#/definitions/Error"
            },
            "description": "Unauthorized"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/ContentTypesAndLayouts"
            },
            "description": "Ok"
          }
        },
        "parameters": [],
        "operationId": "WraftDocWeb.Api.V1.ContentTypeController.index",
        "description": "API to get the list of all content types created so far"
      }
    }
  },
  "info": {
    "version": "0.0.1",
    "title": "Wraft Docs"
  },
  "host": "localhost:4000",
  "definitions": {
    "StateRequest": {
      "type": "object",
      "title": "State Request",
      "required": [
        "order",
        "state"
      ],
      "properties": {
        "state": {
          "type": "string",
          "description": "State name"
        },
        "order": {
          "type": "integer",
          "description": "State's order"
        }
      },
      "example": {
        "state": "Published",
        "order": 1
      },
      "description": "Create state request."
    },
    "UserToken": {
      "type": "object",
      "title": "User and token",
      "required": [
        "token"
      ],
      "properties": {
        "user": {
          "$ref": "#/definitions/User"
        },
        "token": {
          "type": "string",
          "description": "JWT token for authenticating the user"
        }
      },
      "example": {
        "user": {
          "updated_at": "2020-01-21T14:00:00Z",
          "name": "John Doe",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478",
          "email_verify": true,
          "email": "email@xyz.com"
        },
        "token": "Asdlkqweb.Khgqiwue132.xcli123"
      },
      "description": "User details with the generated JWT token for authentication"
    },
    "LayoutAndEngine": {
      "type": "object",
      "title": "Layout and Engine",
      "required": [
        "name",
        "id"
      ],
      "properties": {
        "width": {
          "type": "float",
          "description": "Width of the layout"
        },
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the layout last updated"
        },
        "unit": {
          "type": "string",
          "description": "Unit of dimensions"
        },
        "slug": {
          "type": "string",
          "description": "Name of the slug to be used for the layout"
        },
        "name": {
          "type": "string",
          "description": "Layout's name"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the layout created"
        },
        "id": {
          "type": "string",
          "description": "The ID of the layout"
        },
        "height": {
          "type": "float",
          "description": "Height of the layout"
        },
        "engine": {
          "$ref": "#/definitions/Engine"
        },
        "description": {
          "type": "string",
          "description": "Layout's description"
        }
      },
      "example": {
        "width": 40.0,
        "updated_at": "2020-01-21T14:00:00Z",
        "unit": "cm",
        "slug": "Pandoc",
        "name": "Official Letter",
        "inserted_at": "2020-02-21T14:00:00Z",
        "id": "1232148nb3478",
        "height": 20.0,
        "engine": {
          "updated_at": "2020-01-21T14:00:00Z",
          "name": "Pandoc",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478",
          "api_route": ""
        },
        "description": "An official letter"
      },
      "description": "Layout to be used for the generation of a document."
    },
    "ShowLayout": {
      "type": "object",
      "title": "Layout and all its details",
      "properties": {
        "layout": {
          "$ref": "#/definitions/LayoutAndEngine"
        },
        "creator": {
          "$ref": "#/definitions/User"
        }
      },
      "example": {
        "layout": {
          "width": 40.0,
          "updated_at": "2020-01-21T14:00:00Z",
          "unit": "cm",
          "slug": "Pandoc",
          "name": "Official Letter",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478",
          "height": 20.0,
          "engine": {
            "updated_at": "2020-01-21T14:00:00Z",
            "name": "Pandoc",
            "inserted_at": "2020-02-21T14:00:00Z",
            "id": "1232148nb3478",
            "api_route": ""
          },
          "description": "An official letter"
        },
        "creator": {
          "updated_at": "2020-01-21T14:00:00Z",
          "name": "John Doe",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478",
          "email_verify": true,
          "email": "email@xyz.com"
        }
      },
      "description": "API to show a layout and all its details"
    },
    "Flow": {
      "type": "object",
      "title": "Flow",
      "properties": {
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the flow last updated"
        },
        "name": {
          "type": "string",
          "description": "Name of the flow"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the flow inserted"
        },
        "id": {
          "type": "string",
          "description": "ID of the flow"
        }
      },
      "example": {
        "updated_at": "2020-01-21T14:00:00Z",
        "name": "Flow 1",
        "inserted_at": "2020-02-21T14:00:00Z",
        "id": "1232148nb3478"
      },
      "description": "Flows to be followed in an organisation"
    },
    "CurrentUser": {
      "type": "object",
      "title": "Current User",
      "required": [
        "email",
        "name",
        "id"
      ],
      "properties": {
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the user last updated"
        },
        "role": {
          "type": "string",
          "description": "User's role"
        },
        "profile_pic": {
          "type": "string",
          "description": "User's profile pic URL"
        },
        "name": {
          "type": "string",
          "description": "Users name"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the user inserted"
        },
        "id": {
          "type": "string",
          "description": "The ID of the user"
        },
        "email_verify": {
          "type": "boolean",
          "description": "Email verification status"
        },
        "email": {
          "type": "string",
          "description": "Users email"
        }
      },
      "example": {
        "updated_at": "2020-01-21T14:00:00Z",
        "role": "user",
        "profile_pic": "www.aws.com/users/johndoe.jpg",
        "name": "John Doe",
        "inserted_at": "2020-02-21T14:00:00Z",
        "id": "1232148nb3478",
        "email_verify": true,
        "email": "email@xyz.com"
      },
      "description": "Currently loged in user"
    },
    "Engines": {
      "type": "array",
      "title": "Engines",
      "items": {
        "$ref": "#/definitions/Engine"
      },
      "description": "All engines that have been created"
    },
    "UpdateFlow": {
      "type": "object",
      "title": "Show flow details",
      "properties": {
        "flow": {
          "$ref": "#/definitions/Flow"
        },
        "creator": {
          "$ref": "#/definitions/User"
        }
      },
      "example": {
        "flow": {
          "updated_at": "2020-01-21T14:00:00Z",
          "name": "Flow 1",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478"
        },
        "creator": {
          "updated_at": "2020-01-21T14:00:00Z",
          "name": "John Doe",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478",
          "email_verify": true,
          "email": "email@xyz.com"
        }
      },
      "description": "Show all details of a flow"
    },
    "ShowContentType": {
      "type": "object",
      "title": "Content Type and all its details",
      "properties": {
        "creator": {
          "$ref": "#/definitions/User"
        },
        "content_type": {
          "$ref": "#/definitions/ContentTypeAndLayout"
        }
      },
      "example": {
        "creator": {
          "updated_at": "2020-01-21T14:00:00Z",
          "name": "John Doe",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478",
          "email_verify": true,
          "email": "email@xyz.com"
        },
        "content_type": {
          "updated_at": "2020-01-21T14:00:00Z",
          "prefix": "OFFLET",
          "name": "Offer letter",
          "layout": {
            "width": 40.0,
            "updated_at": "2020-01-21T14:00:00Z",
            "unit": "cm",
            "slug": "Pandoc",
            "name": "Official Letter",
            "inserted_at": "2020-02-21T14:00:00Z",
            "id": "1232148nb3478",
            "height": 20.0,
            "description": "An official letter"
          },
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478",
          "fields": {
            "position": "string",
            "name": "string",
            "joining_date": "date",
            "approved_by": "string"
          },
          "description": "An offer letter"
        }
      },
      "description": "API to show a content type and all its details"
    },
    "Content": {
      "type": "object",
      "title": "Content",
      "required": [
        "id"
      ],
      "properties": {
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the engine last updated"
        },
        "serialized": {
          "type": "map",
          "description": "Serialized data of the content"
        },
        "raw": {
          "type": "string",
          "description": "Raw data of the content"
        },
        "instance_id": {
          "type": "string",
          "description": "A unique ID generated for the content"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the engine inserted"
        },
        "id": {
          "type": "string",
          "description": "The ID of the content"
        }
      },
      "example": {
        "updated_at": "2020-01-21T14:00:00Z",
        "serialized": {
          "title": "Title of the content",
          "body": "Body of the content"
        },
        "raw": "Content",
        "instance_id": "OFFL01",
        "inserted_at": "2020-02-21T14:00:00Z",
        "id": "1232148nb3478"
      },
      "description": "A content, which is then used to generate the out files."
    },
    "ContentAndContentTypeAndFlow": {
      "type": "object",
      "title": "Content and its Content Type",
      "properties": {
        "state": {
          "$ref": "#/definitions/State"
        },
        "content_type": {
          "$ref": "#/definitions/ContentType"
        },
        "content": {
          "$ref": "#/definitions/Content"
        }
      },
      "example": {
        "state": {
          "updated_at": "2020-01-21T14:00:00Z",
          "state": "published",
          "order": 1,
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478"
        },
        "content_type": {
          "updated_at": "2020-01-21T14:00:00Z",
          "name": "Offer letter",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478",
          "fields": {
            "position": "string",
            "name": "string",
            "joining_date": "date",
            "approved_by": "string"
          },
          "description": "An offer letter"
        },
        "content": {
          "updated_at": "2020-01-21T14:00:00Z",
          "serialized": {
            "title": "Title of the content",
            "body": "Body of the content"
          },
          "raw": "Content",
          "instance_id": "OFFL01",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478"
        }
      },
      "description": "A content and its content type"
    },
    "Engine": {
      "type": "object",
      "title": "Render engine",
      "required": [
        "name",
        "id"
      ],
      "properties": {
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the engine last updated"
        },
        "name": {
          "type": "string",
          "description": "Engine's name"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the engine inserted"
        },
        "id": {
          "type": "string",
          "description": "The ID of the engine"
        },
        "api_route": {
          "type": "string",
          "description": "API route to be used"
        }
      },
      "example": {
        "updated_at": "2020-01-21T14:00:00Z",
        "name": "Pandoc",
        "inserted_at": "2020-02-21T14:00:00Z",
        "id": "1232148nb3478",
        "api_route": ""
      },
      "description": "A render engine to be used for document generation"
    },
    "LayoutsAndEngines": {
      "type": "array",
      "title": "Layouts and its Engines",
      "items": {
        "$ref": "#/definitions/LayoutAndEngine"
      },
      "description": "All layouts that have been created and their engines"
    },
    "ShowStates": {
      "type": "array",
      "title": "All states and its details",
      "items": {
        "$ref": "#/definitions/ShowState"
      },
      "description": "All states that have been created and their details"
    },
    "ContentType": {
      "type": "object",
      "title": "Content Type",
      "required": [
        "name",
        "id"
      ],
      "properties": {
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the user last updated"
        },
        "prefix": {
          "type": "string",
          "description": "Prefix to be used for generating Unique ID for contents"
        },
        "name": {
          "type": "string",
          "description": "Content Type's name"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the user inserted"
        },
        "id": {
          "type": "string",
          "description": "The ID of the content type"
        },
        "fields": {
          "type": "map",
          "description": "Dynamic fields and their datatype"
        },
        "description": {
          "type": "string",
          "description": "Content Type's description"
        }
      },
      "example": {
        "updated_at": "2020-01-21T14:00:00Z",
        "prefix": "OFFLET",
        "name": "Offer letter",
        "inserted_at": "2020-02-21T14:00:00Z",
        "id": "1232148nb3478",
        "fields": {
          "position": "string",
          "name": "string",
          "joining_date": "date",
          "approved_by": "string"
        },
        "description": "An offer letter"
      },
      "description": "A Content Type."
    },
    "ContentTypeAndLayout": {
      "type": "object",
      "title": "Content Type and Layout",
      "required": [
        "name",
        "id"
      ],
      "properties": {
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the user last updated"
        },
        "prefix": {
          "type": "string",
          "description": "Prefix to be used for generating Unique ID for contents"
        },
        "name": {
          "type": "string",
          "description": "Content Type's name"
        },
        "layout": {
          "$ref": "#/definitions/Layout"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the user inserted"
        },
        "id": {
          "type": "string",
          "description": "The ID of the content type"
        },
        "fields": {
          "type": "map",
          "description": "Dynamic fields and their datatype"
        },
        "description": {
          "type": "string",
          "description": "Content Type's description"
        }
      },
      "example": {
        "updated_at": "2020-01-21T14:00:00Z",
        "prefix": "OFFLET",
        "name": "Offer letter",
        "layout": {
          "width": 40.0,
          "updated_at": "2020-01-21T14:00:00Z",
          "unit": "cm",
          "slug": "Pandoc",
          "name": "Official Letter",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478",
          "height": 20.0,
          "description": "An official letter"
        },
        "inserted_at": "2020-02-21T14:00:00Z",
        "id": "1232148nb3478",
        "fields": {
          "position": "string",
          "name": "string",
          "joining_date": "date",
          "approved_by": "string"
        },
        "description": "An offer letter"
      },
      "description": "Content Type to be used for the generation of a document."
    },
    "Themes": {
      "type": "array",
      "title": "All themes and its details",
      "items": {
        "$ref": "#/definitions/Theme"
      },
      "description": "All themes that have been created under current user's organisation and their details"
    },
    "ShowTheme": {
      "type": "object",
      "title": "Show Theme",
      "properties": {
        "theme": {
          "$ref": "#/definitions/Theme"
        },
        "creator": {
          "$ref": "#/definitions/User"
        }
      },
      "example": {
        "theme": {
          "updated_at": "2020-01-21T14:00:00Z",
          "typescale": {
            "p": "6",
            "h2": "8",
            "h1": "10"
          },
          "name": "Official Letter Theme",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478",
          "font": "Malery",
          "file": "/malory.css"
        },
        "creator": {
          "updated_at": "2020-01-21T14:00:00Z",
          "name": "John Doe",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478",
          "email_verify": true,
          "email": "email@xyz.com"
        }
      },
      "description": "Show details of a theme"
    },
    "Theme": {
      "type": "object",
      "title": "Theme",
      "required": [
        "typescale",
        "font",
        "name",
        "id"
      ],
      "properties": {
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the layout last updated"
        },
        "typescale": {
          "type": "map",
          "description": "Typescale of the theme"
        },
        "name": {
          "type": "string",
          "description": "Theme's name"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the layout created"
        },
        "id": {
          "type": "string",
          "description": "The ID of the theme"
        },
        "font": {
          "type": "string",
          "description": "Font name"
        },
        "file": {
          "type": "string",
          "description": "Theme file attachment"
        }
      },
      "example": {
        "updated_at": "2020-01-21T14:00:00Z",
        "typescale": {
          "p": "6",
          "h2": "8",
          "h1": "10"
        },
        "name": "Official Letter Theme",
        "inserted_at": "2020-02-21T14:00:00Z",
        "id": "1232148nb3478",
        "font": "Malery",
        "file": "/malory.css"
      },
      "description": "A Theme"
    },
    "ShowFlows": {
      "type": "array",
      "title": "All flows and its details",
      "items": {
        "$ref": "#/definitions/UpdateFlow"
      },
      "description": "All flows that have been created and their details"
    },
    "UserLoginRequest": {
      "type": "object",
      "title": "User Login",
      "required": [
        "password",
        "email"
      ],
      "properties": {
        "password": {
          "type": "string",
          "description": "User's password"
        },
        "email": {
          "type": "string",
          "description": "User's email"
        }
      },
      "example": {
        "password": "Password",
        "email": "email@xyz.com"
      },
      "description": "A user log in to the application"
    },
    "ContentTypesAndLayouts": {
      "type": "array",
      "title": "Content Types and their Layouts",
      "items": {
        "$ref": "#/definitions/ContentTypeAndLayout"
      },
      "description": "All content types that have been created and their layouts"
    },
    "User": {
      "type": "object",
      "title": "User",
      "required": [
        "email",
        "name",
        "id"
      ],
      "properties": {
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the user last updated"
        },
        "name": {
          "type": "string",
          "description": "Users name"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the user inserted"
        },
        "id": {
          "type": "string",
          "description": "The ID of the user"
        },
        "email_verify": {
          "type": "boolean",
          "description": "Email verification status"
        },
        "email": {
          "type": "string",
          "description": "Users email"
        }
      },
      "example": {
        "updated_at": "2020-01-21T14:00:00Z",
        "name": "John Doe",
        "inserted_at": "2020-02-21T14:00:00Z",
        "id": "1232148nb3478",
        "email_verify": true,
        "email": "email@xyz.com"
      },
      "description": "A user of the application"
    },
    "ContentTypeRequest": {
      "type": "object",
      "title": "Content Type Request",
      "required": [
        "name"
      ],
      "properties": {
        "prefix": {
          "type": "string",
          "description": "Prefix to be used for generating Unique ID for contents"
        },
        "name": {
          "type": "string",
          "description": "Content Type's name"
        },
        "layout_uuid": {
          "type": "string",
          "description": "ID of the layout selected"
        },
        "fields": {
          "type": "map",
          "description": "Dynamic fields and their datatype"
        },
        "description": {
          "type": "string",
          "description": "Content Type's description"
        }
      },
      "example": {
        "prefix": "OFFLET",
        "name": "Offer letter",
        "layout_uuid": "1232148nb3478",
        "fields": {
          "position": "string",
          "name": "string",
          "joining_date": "date",
          "approved_by": "string"
        },
        "description": "An offer letter"
      },
      "description": "Create content type request."
    },
    "State": {
      "type": "object",
      "title": "State",
      "properties": {
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the state last updated"
        },
        "state": {
          "type": "string",
          "description": "A state of content"
        },
        "order": {
          "type": "integer",
          "description": "Order of the state"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the state inserted"
        },
        "id": {
          "type": "string",
          "description": "ID of the state"
        }
      },
      "example": {
        "updated_at": "2020-01-21T14:00:00Z",
        "state": "published",
        "order": 1,
        "inserted_at": "2020-02-21T14:00:00Z",
        "id": "1232148nb3478"
      },
      "description": "State assigened to contents"
    },
    "UserRegisterRequest": {
      "type": "object",
      "title": "Register User",
      "required": [
        "password",
        "email",
        "name"
      ],
      "properties": {
        "password": {
          "type": "string",
          "description": "User's password"
        },
        "name": {
          "type": "string",
          "description": "User's name"
        },
        "email": {
          "type": "string",
          "description": "User's email"
        }
      },
      "example": {
        "password": "Password",
        "name": "John Doe",
        "email": "email@xyz.com"
      },
      "description": "A user to be registered in the application"
    },
    "FlowAndStates": {
      "type": "object",
      "title": "Show flow details and its states",
      "properties": {
        "states": {
          "$ref": "#/definitions/State"
        },
        "flow": {
          "$ref": "#/definitions/Flow"
        },
        "creator": {
          "$ref": "#/definitions/User"
        }
      },
      "example": {
        "states": [
          {
            "state": "published",
            "order": 1,
            "id": "1232148nb3478"
          }
        ],
        "flow": {
          "updated_at": "2020-01-21T14:00:00Z",
          "name": "Flow 1",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478"
        },
        "creator": {
          "updated_at": "2020-01-21T14:00:00Z",
          "name": "John Doe",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478",
          "email_verify": true,
          "email": "email@xyz.com"
        }
      },
      "description": "Show all details of a flow including all the states undet the flow"
    },
    "FlowRequest": {
      "type": "object",
      "title": "Flow Request",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Flow's name"
        }
      },
      "example": {
        "name": "Flow 1"
      },
      "description": "Create flow request."
    },
    "LayoutRequest": {
      "type": "object",
      "title": "Layout Request",
      "required": [
        "name"
      ],
      "properties": {
        "width": {
          "type": "float",
          "description": "Width of the layout"
        },
        "unit": {
          "type": "string",
          "description": "Unit of dimensions"
        },
        "slug": {
          "type": "string",
          "description": "Name of the slug to be used for the layout"
        },
        "name": {
          "type": "string",
          "description": "Layout's name"
        },
        "height": {
          "type": "float",
          "description": "Height of the layout"
        },
        "engine_uuid": {
          "type": "string",
          "description": "ID of the engine selected"
        },
        "description": {
          "type": "string",
          "description": "Layout's description"
        }
      },
      "example": {
        "width": 40.0,
        "unit": "cm",
        "slug": "Pandoc",
        "name": "Official Letter",
        "height": 20.0,
        "engine_uuid": "1232148nb3478",
        "description": "An official letter"
      },
      "description": "Create layout request."
    },
    "Layout": {
      "type": "object",
      "title": "Layout",
      "required": [
        "name",
        "id"
      ],
      "properties": {
        "width": {
          "type": "float",
          "description": "Width of the layout"
        },
        "updated_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the layout last updated"
        },
        "unit": {
          "type": "string",
          "description": "Unit of dimensions"
        },
        "slug": {
          "type": "string",
          "description": "Name of the slug to be used for the layout"
        },
        "name": {
          "type": "string",
          "description": "Layout's name"
        },
        "inserted_at": {
          "type": "string",
          "format": "ISO-8601",
          "description": "When was the layout created"
        },
        "id": {
          "type": "string",
          "description": "The ID of the layout"
        },
        "height": {
          "type": "float",
          "description": "Height of the layout"
        },
        "description": {
          "type": "string",
          "description": "Layout's description"
        }
      },
      "example": {
        "width": 40.0,
        "updated_at": "2020-01-21T14:00:00Z",
        "unit": "cm",
        "slug": "Pandoc",
        "name": "Official Letter",
        "inserted_at": "2020-02-21T14:00:00Z",
        "id": "1232148nb3478",
        "height": 20.0,
        "description": "An official letter"
      },
      "description": "A Layout"
    },
    "ContentRequest": {
      "type": "object",
      "title": "Content Request",
      "required": [
        "state_uuid",
        "raw"
      ],
      "properties": {
        "state_uuid": {
          "type": "string",
          "description": "Flow id"
        },
        "serialized": {
          "type": "string",
          "description": "Content serialized data"
        },
        "raw": {
          "type": "string",
          "description": "Content raw data"
        }
      },
      "example": {
        "state_uuid": "kjb12389k23eyg",
        "serialized": {
          "title": "Title of the content",
          "body": "Body of the content"
        },
        "raw": "Content data"
      },
      "description": "Content creation request"
    },
    "Error": {
      "type": "object",
      "title": "Errors",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "type": "string",
          "description": "The message of the error raised"
        }
      },
      "description": "Error responses from the API"
    },
    "ShowState": {
      "type": "object",
      "title": "Show flow details",
      "properties": {
        "state": {
          "$ref": "#/definitions/State"
        },
        "flow": {
          "$ref": "#/definitions/Flow"
        },
        "creator": {
          "$ref": "#/definitions/User"
        }
      },
      "example": {
        "state": {
          "updated_at": "2020-01-21T14:00:00Z",
          "state": "published",
          "order": 1,
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478"
        },
        "flow": {
          "updated_at": "2020-01-21T14:00:00Z",
          "name": "Flow 1",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "jnb234881adsad"
        },
        "creator": {
          "updated_at": "2020-01-21T14:00:00Z",
          "name": "John Doe",
          "inserted_at": "2020-02-21T14:00:00Z",
          "id": "1232148nb3478",
          "email_verify": true,
          "email": "email@xyz.com"
        }
      },
      "description": "Show all details of a flow"
    }
  },
  "basePath": "/api/v1"
}